name: insider


# Services/containers
services:

  # Case Study server
  server:
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    build:
      context: ./src
      dockerfile: Dockerfile
      args:
        - PORT=${SERVER_PORT}
    container_name: server
    restart: unless-stopped
    environment:
      - PORT=${SERVER_PORT}
      # Webhook url
      - WEBHOOK_URL=${WEBHOOK_URL}
      # PostgreSQL connection settings
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      # Redis connection settings
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - ${SERVER_PORT}:${SERVER_PORT}
    networks:
      - default

  # PostgreSQL database
  postgres:
    image: postgres:17-alpine
    container_name: postgres
    restart: always
    attach: false
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - ${POSTGRES_PORT}:5432
    volumes:
      - ${POSTGRES_VOLUME}:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - default

  # Redis
  redis:
    image: redis:7.4-alpine
    container_name: redis
    restart: always
    attach: false
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - ${REDIS_PORT}:6379
    volumes:
      - ${REDIS_VOLUME}:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - default


# Networks
networks:
  default:
    driver: bridge
